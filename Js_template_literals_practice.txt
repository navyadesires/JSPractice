Javascript template literals***
-Synomous:
-Template literals
-String Templates
-Back-Tics syntax
-Template Strings

<html>
<body>
<h2>JavaScript Template Literals</h2>
<p>Template literals allows multiline strings:</p>
<p id="demo"></p>
<script>
let text =
`The quick
brown fox
jumps over
the lazy dog`;
document.getElementById("demo").innerHTML = text;
</script>
</body>
</html>
o/p:The quick brown fox jumps over the lazy dog

** template literals use back-ticks (` `) to defined a string.
let text = `Hello world!`;
console.log(text);
Hello World

* with template literals , u can use both single and double quotes inside a string.
 
* Interpolation
Template literals provide an easy way to interpolate variables and expression into strings.this method is called string interpolation.
syntax: ${...}

* template literals allows variables in strings
 let firstName = "John";
let lastName = "Doe";

let text = `Welcome ${firstName}, ${lastName}!`;
console.log(text);


12/06/2023
JS Numbers:
<p>If you add two strings, the result will be a concatenated strings:</p>

<p id="demo"></p>
<script>
let x = "123";
let y = "1";
let z = x + y;
document.getElementById("demo").innerHTML = z;
</script>
o/p:- 1231
*If you add a string and a number, the result will be a concatenated string.
*If you add a number and a string, the result will be a concatenated string.

<p>JS will try to convert strings to numbers when dividing:</p>

<p id="demo"></p>
<script>
let x = "120";
let y = "10";
let z = x / y;
document.getElementById("demo").innerHTML = z;
</script>
o/p: 12

*** Nan - Not a Number
* NaN is a JavaScript reserved word indicating that a number is not a legal number.

<p> the type of Nan is number. </p>

<p id="demo"></p>
<script>
let x = NaN;
document.getElementById("demo").innerHTML = typeof x;
</script>
o/p:number


<p> the type of Infinity is number. </p>

<p id="demo"></p>
<script>
let x = Infinity;
document.getElementById("demo").innerHTML = typeof x;
</script>
o/p: number

Hexadecimal is base 16
Decimal is base 10
octal is base 8
Binary is Base 2

Jun 13 2023

*** BigInt ***

JS BigInt variables are used to store big integer values that are too big to be represented by a normal JS "Number".

* In JS, all numbes are stored in a 64-bit floating-point format.

 * Arithmetic between a bigInt and Number is not allowed.
 * Unsigned right shift(>>>) can not be done on a BigInt.

Number.isSafeInterger
the Number.isSafeInterger() static method determines wheter the provided value is a number that is same integer.

jun 14

toString() - returns a number as a string
toExponential() - returns a number written in exponential notation.
toFixed() - returns a number written with a number of decomals.
toprecision() - returns number written with a specific length
ValueOf() - Returns a number as a number

toString():
<p id="demo"></p>
<script>
let x = 123;
document.getElementById("demo").innerHTML = x.toString() + "<br>" +
(100 + 23).toString() + "<br>"+
(123).toString();
</script>
o/p: 123
123
123


jun 16

Array methods:

**JS Array length **
the length property returns the length(size) of an array.
ex:
<p> the length property return the length of an array. </p>
<p id="demo"></p>
<script>
const fruits = ["Banana", "Orange","Apple","mango"];
let size = fruits.length;
document.getElementById("demo").innerHTML = size;
</script>
o/p: 4
** JS Array toString() **
* toString()  returns an array to a string of (comma separated values)
ex: 
<p> the tostring() method returns an array as a commas separated string.</p>
<p id="demo"></p>
<script>
const fruits = ["Banana", "Orange","Apple","Mango"];
document.getElementById("demo").innerHTML = fruits.toString();
</script>
o/p:Banana,Orange,Apple,Mango
*Join():
join() method also joins all array elements into a string.
It behaves just like toString(), but in addition you can specify the separator.
<p id="demo"></p>
<script>
const fruits = ["Banana", "Orange","Apple","Mango"];
document.getElementById("demo").innerHTML = fruits.join("*");
</script>
o/p:Banana * Orange * Apple * Mango

* Popping and pushing
Popping items out of an array, or pushing items inti an array.

JS Array pop():
the pop method removes the last element from an array.

<p id="demo1"></p>
<p id="demo2"></p>
<script>
const fruits = ["Banana", "Orange","Apple","Mango"];
document.getElementById("demo1").innerHTML = fruits.pop();
document.getElementById("demo2").innerHTML = fruits;
</script>

o/p:Banana,Orange,Apple,Mango

Banana,Orange,Apple

the pop() method returns the value that was "poped out"
<p id="demo1"></p>
<p id="demo2"></p>
<script>
const fruits = ["Banana", "Orange","Apple","Mango"];
document.getElementById("demo1").innerHTML = fruits.pop();
document.getElementById("demo2").innerHTML = fruits;
</script>
o/p:Mango

Banana,Orange,Apple

JS Array push()
the push() method adds a new element to an array(at the end).
<p id="demo1"></p>
<p id="demo2"></p>
<script>
const fruits = ["Banana", "Orange","Apple","Mango"];
document.getElementById("demo1").innerHTML = fruits;
fruits.push("KIWI");
document.getElementById("demo2").innerHTML = fruits;
</script>
o/p:Banana,Orange,Apple,Mango

Banana,Orange,Apple,Mango,KIWI

<p id="demo1"></p>
<p id="demo2"></p>
<script>
const fruits = ["Banana", "Orange","Apple","Mango"];
document.getElementById("demo1").innerHTML = fruits.push("Kiwi");
document.getElementById("demo2").innerHTML = fruits;
</script>
o/p: 5

Banana,Orange,Apple,Mango,Kiwi

Shift:
this method() removes the first element of an array.
<p id="demo1"></p>
<p id="demo2"></p>
<script>
const fruits = ["Banana", "Orange","Apple","Mango"];
document.getElementById("demo1").innerHTML = fruits;
fruits.shift();
document.getElementById("demo2").innerHTML = fruits;
</script>

o/p:Banana,Orange,Apple,Mango

Orange,Apple,Mango

* The shift() method returns the value that was "shifted out":

<p>The shift() method returns the element that was shifted out.</p>
<p id="demo1"></p>
<p id="demo2"></p>
<script>
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo1").innerHTML = fruits.shift();
document.getElementById("demo2").innerHTML = fruits;
</script>
o/p:Banana

Orange,Apple,Mango

*Array unshift()
<p>The unshift() method adds new elements to the beginning of an array:</p>

<p id="demo1"></p>
<p id="demo2"></p>

<script>
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo1").innerHTML = fruits;
fruits.unshift("Lemon");
document.getElementById("demo2").innerHTML = fruits;
</script>
o/p:5

Lemon,Banana,Orange,Apple,Mango

*** Array Length:
The length property provides an easy way to append new elements to an array without using push() method:

<p id="demo1"></p>
<p id="demo2"></p>
<script>
const fruits = ["Banana", "Orange","Apple","Mango"];
document.getElementById("demo1").innerHTML = fruits;
fruits[fruits.length]="Sapota";
document.getElementById("demo2").innerHTML = fruits;
</script>
o/p:Banana,Orange,Apple,Mango

Banana,Orange,Apple,Mango,Kiwi

*** Array delete():

Array elements can be deleted using the JavaScript operator delete.

Using delete leaves undefined holes in the array.

Use pop() or shift() instead.
<p id="demo1"></p>
<p id="demo2"></p>
<script>
const fruits = ["Banana", "Orange","Apple","Mango"];
document.getElementById("demo1").innerHTML = "the first fruit is: " 
+ fruits[0];
delete fruits[0];
document.getElementById("demo2").innerHTML = "the second fruit is: " 
+ fruits[0];
</script>

*** concat():
concat() method merges (concatenates) arrays:

<p id="demo"></p>
<script>
const myGirls = ["anshu", "anu"];
const myBoys = ["Email","linus","Tobias"];
const myChildern = myGirls.concat(myBoys);
document.getElementById("demo").innerHTML = myChildern;
</script>
o/p:anshu,anu,Email,linus,Tobias

The concat() method does not change the existing arrays. It always returns a new array.
The concat() method merges (concatenates) arrays:
<script>
const myGirls = ["anshu", "anu"];
const myBoys = ["Email","linus","Tobias"];
const myheros= ["Robin","Sohith"];
const myChildern = myGirls.concat(myBoys,myheros);
document.getElementById("demo").innerHTML = myChildern;
</script>

o/p: anshu,anu,Email,linus,Tobias,Robin,Sohith

Splicing and Slicing Arrays
The splice() method adds new items to an array.
The slice() method slices out apiece of an array.


<p>The splice() method adds new elements to an array, and returns an array with the deleted elements (if any):</p>

<p id="demo1"></p>
<p id="demo2"></p>
<p id="demo3"></p>

<script>
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo1").innerHTML = "Original Array:<br> " + fruits;
let removed = fruits.splice(2, 2, "Lemon", "Kiwi"); 
document.getElementById("demo2").innerHTML = "New Array:<br>" + fruits;
document.getElementById("demo3").innerHTML = "Removed Items:<br> " + removed; 
</script>
o/p:The splice() method adds new elements to an array, and returns an array with the deleted elements (if any):

Original Array:
Banana,Orange,Apple,Mango

New Array:
Banana,Orange,Lemon,Kiwi

Removed Items:
Apple,Mango

jun 19
*** js slice() 
the slice() method slices out a piece of an array into a new array.
june 20:
JS Array Sort
The sort() method sorts an array alphabetically

<p> tThe sort() method sorts an array alphabetically.</p>
<p id="demo1"></p>
<p id="demo2"></p>
<script>
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo1").innerHTML = "Original Array:<br> " + fruits;
fruits.sort();
document.getElementById("demo2").innerHTML = "Sort an array:<br>" +fruits;
</script>

o/p:the tostring() method returns an array as a commas separated string.

Original Array:
Banana,Orange,Apple,Mango

Sort an array:
Apple,Banana,Mango,Orange

Reversing an array
the reverse() method reverse the elements in an array.

<p id="demo1"></p>
<p id="demo2"></p>
<script>
const fruits = ["Banana", "Orange", "Apple", "Mango"];
document.getElementById("demo1").innerHTML = "Original Array:<br> " + fruits;
fruits.sort()
fruits.reverse();
document.getElementById("demo2").innerHTML = "Sort an array:<br>" +fruits;
</script>

ex:Original Array:
Banana,Orange,Apple,Mango

Sort an array:
Orange,Mango,Banana,Apple

** Numeric Sort **
By default, the sort() function sorts values as string.
the soft() method will produce incorrect result when sorting numbers.

<p id="demo1"></p>
<p id="demo2"></p>
<script>
const points = [40, 100, 1, 5, 25, 10];
document.getElementById("demo1").innerHTML = "Original Array:<br> " + points;
points.sort(function(a,b){return a-b});
document.getElementById("demo2").innerHTML = "Sort an array:<br>" +points;
</script>
o/p:40,100,1,5,25,10
    100,40,25,10,5,1

*Decending Order:
<script>
const points = [40, 100, 1, 5, 25, 10];
document.getElementById("demo1").innerHTML = points;

points.sort(function(a, b){return b - a});
document.getElementById("demo2").innerHTML = points;
</script>
o/p:40,100,1,5,25,10
100,40,25,10,5,1

*experiment with numerically and alphabetically sorting:

<button onclick="myFunction1()">Sort Alphabetically</button>
<button onclick="myFunction2()">Sort Numerically</button>
<p id="demo"></p>
<script>
const points = [40, 100, 1, 5, 25, 10];
document.getElementById("demo").innerHTML = points;
function myFunction1(){
points.sort();
document.getElementById("demo").innerHTML = points
}
function myFunction2(){
points.sort(function(a,b){return a-b});
document.getElementById("demo").innerHTML = points;
}
</script>
o/p:Sort Alphabetically 1,10,100,25,40,5
Sort Numerically 1,5,10,25,40,100

*Sorting an Array in Random Order
<p>Click the button (again and again) to sort the array in random order.</p>
<button onclick="myFunction()">Try it</button>
<p id="demo"></p>
<script>
const points = [40, 100, 1, 5, 25, 10];
document.getElementById("demo").innerHTML = points;
function myFunction(){
points.sort(function(){return 0.5 - Math.random()})
document.getElementById("demo").innerHTML = points;
}
</script>
o/p:
<p>Click the button (again and again) to sort the array in random order.</p>
Try it
10,40,25,1,100,5
5,100,1,25,40,10
1,25,100,10,5,40
* randome values

***Find the Highest(or Lowest) Array value
There are no built-in functions for finding the max or min value in an array.

However, after you have sorted an array, you can use the index to obtain the highest and lowest values.

Sorting ascending:

<p>The lowest number is <span id="demo"></span>.</p>

<script>
const points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return a-b});
document.getElementById("demo").innerHTML = points[0];
</script>
o/p:The lowest number is 1.
* decendening order:
<script>
const points = [40, 100, 1, 5, 25, 10];
points.sort(function(a, b){return b-a});
document.getElementById("demo").innerHTML = points[0];
</script>
o/p: The highest number is 100.

*** Using Math.max() on an array:
u can use Math.max.apply to find the highest number in an array.
<p> The highest number is <span id="demo"></span></p>
<script>
const points = [40, 100, 1, 5, 25, 10];
document.getElementById("demo").innerHTML = myArrayMax(points);
function myArrayMax(arr){
return Math.max.apply(null, arr);
}
</script>
o/p:The highest number is 100.

*** Using Math.min() on an array:
u can use Math.max.apply to find the highest number in an array.
<p> The highest number is <span id="demo"></span></p>
<script>
const points = [40, 100, 1, 5, 25, 10];
document.getElementById("demo").innerHTML = myArrayMax(points);
function myArrayMax(arr){
return Math.min.apply(null, arr);
}
</script>
o/p:The highest number is 1.

Math.min.apply(null, [1, 2, 3]) is equivalent to Math.min(1, 2, 3).


**Sorting Object Arrays
<p id="demo"></p>
<script>
const cars = [
{type:"Volvo", year:2016},
{type:"Saab", year:2001},
{type:"BMW", year:2010}
];
displayCars();

cars.sort(function(a,b){return a.year - b.year});
displayCars();

function displayCars(){
document.getElementById("demo").innerHTML = 
cars[0].type + " " + cars[0].year + "<br>" +
cars[1].type + " " + cars[1].year + "<br>" +
cars[2].type + " " + cars[2].year;
}
</script>
o/p:Saab 2001
BMW 2010
Volvo 2016

